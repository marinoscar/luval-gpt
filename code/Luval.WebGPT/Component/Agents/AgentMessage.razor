@using Luval.Framework.Services
@using Luval.GPT.Data.Entities
@using Luval.WebGPT.Presenter

@inject AgentPresenter presenter

@if (Message != null && Message.Result != null && Message.Status == ServiceStatus.Completed)
{
    <div style="padding-bottom:20px">
        <div class="card">
            <div class="card-body">
                <p class="card-text">
                    @Message.Result.AgentText
                </p>
                <hr />
                <div class="row">
                    <div class="col">
                        @if(Message.Result.UpVote <= 0)
                        {
                            <a class="btn btn-primary" @onclick="UpVote">Like</a>
                        }
                        else
                        {
                            <a class="btn btn-primary" @onclick="UpVote">Like +@Message.Result.UpVote</a>
                        }
                    </div>
                    <div class="col">
                        @if (!string.IsNullOrWhiteSpace(@Message.Result.AgentMediaItemUrl))
                        {
                            <audio controls>
                                <source src="@Message.Result.AgentMediaItemUrl" type="audio/mp3">
                                Your browser does not support the audio element.
                            </audio>
                        }
                    </div>
                </div>
            </div>
            <div class="card-footer text-muted">
                Created @presenter.GetCreatedTimeString(Message.Result.UtcCreatedOn)
            </div>
        </div>
    </div>
}
else if (Message != null && Message.Status == ServiceStatus.Fail)
{
    <h3>Failed to load: @Message.Message</h3>
}
else
{
    <Spinner ShowSpinner=true></Spinner>
}



@code {
    [Parameter]
    public string? MessageId { get; set; }
    [Parameter]
    public string? AgentId { get; set; }

    public ServiceResponse<AppMessage> Message { get; set; }

    protected override void OnInitialized()
    {
        Load();
        base.OnInitialized();
    }

    private async Task Load()
    {
        Message = await presenter.LoadMessage(AgentId, MessageId);

        if (Message.Status == ServiceStatus.Completed)
            this.StateHasChanged();
    }

    private void UpVote()
    {
        presenter.Run(() =>
        {
            var msg = presenter.UpVote(Message.Result.Id);
            Message.Result.UpVote = msg.UpVote;
        });
        InvokeAsync(StateHasChanged);
    }
}
